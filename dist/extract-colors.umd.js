!function(t,i){"object"==typeof exports&&"undefined"!=typeof module?module.exports=i():"function"==typeof define&&define.amd?define(i):(t=t||self,t.extractColors=i())}(this,function(){"use strict";class t{constructor(t,i,e,n){this.isColor=!0,this.red=t,this.green=i,this.blue=e,this.hex=n,this.count=1}distance(t){return Math.abs(t.red-this.red)+Math.abs(t.green-this.green)+Math.abs(t.blue-this.blue)}getWeight(t){return this.count+this.getSaturation()*t}getSaturation(){return void 0===this.saturation&&(this.saturation=Math.max(Math.abs(this.red-this.green),Math.abs(this.red-this.blue),Math.abs(this.green-this.blue))),this.saturation}}class i{constructor(){this.count=1,this.children={}}addGroup(t){return this.children[t]?this.children[t].count++:this.children[t]=new i,this.children[t]}addColor(i,e,n,o){return this.children[i]?this.children[i].count++:this.children[i]=new t(e,n,o,i),this.children[i]}getList(){return Object.keys(this.children).map(t=>this.children[t])}getMaxWeight(t){if(void 0===this.maxWeight){const i=this.getList().map(i=>i.isColor?i.getWeight(t):i.getMaxWeight(t));i.sort((t,i)=>i-t),this.maxWeight=i[0]||0}return this.maxWeight}getMaxWeightColor(t){const i=this.getList();return i.sort((i,e)=>{if(i.isColor)return e.getWeight(t)-i.getWeight(t);return e.getMaxWeight(t)-i.getMaxWeight(t)}),i[0].isColor?i[0]:i[0].getMaxWeightColor(t)}getColors(t,i){const e=this.getList().map(t=>{const e=t.count;const n=t.getMaxWeightColor(i);n.count=e;return n});e.sort((t,e)=>e.getWeight(i)-t.getWeight(i));const n=[];return e.forEach(i=>{const e=n.find(e=>e.distance(i)<t);e?e.count+=i.count:n.push(i)}),n}}class e{constructor(t,{pixels:pixels=1e4,distance:distance=150,saturationImportance:saturationImportance=5,splitPower:splitPower=10,colorValidator:colorValidator=((red,green,blue,alpha=255)=>alpha>250)}={}){this.pixels=pixels,this.splitPower=splitPower,this.distance=distance,this.saturationImportance=saturationImportance,this.colorValidator=colorValidator}process(t){const e=new i,n=this.splitPower;for(let i=0;i<t.length;i+=4){const o=t[i],s=t[i+1],r=t[i+2],h=t[i+3];if(this.colorValidator(o,s,r,h)){const t=o<<16|s<<8|r,i=(o>>4&15)<<2|(s>>4&15)<<1|r>>4&15,h=Math.round(o*(n-1)/255)*(n*n)+Math.round(s*(n-1)/255)*n+Math.round(r*(n-1)/255);e.addGroup(h).addGroup(i).addColor(t,o,s,r)}}return e.getColors(this.distance,this.saturationImportance)}extract(t){const i=t.width*t.height,e=i<this.pixels?t.width:Math.round(t.width*Math.sqrt(this.pixels/i)),n=i<this.pixels?t.height:Math.round(t.height*Math.sqrt(this.pixels/i)),o=document.createElement("canvas");o.width=e,o.height=n;const s=o.getContext("2d");s.drawImage(t,0,0,t.width,t.height,0,0,e,n);const r=s.getImageData(0,0,e,n);return this.process(r.data).map(t=>({hex:"#"+"0".repeat(6-t.hex.toString(16).length)+t.hex.toString(16),red:t.red,green:t.green,blue:t.blue,area:t.count/this.pixels,saturation:t.saturation/255}))}}return(t,i)=>new Promise((n,o)=>{const s=new Image;const r=()=>{s.removeEventListener("load",r);const t=new e(i);const o=t.extract(s);n(o)};s.addEventListener("load",r);s.src=t})});

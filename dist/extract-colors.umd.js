!function(t,n){"object"==typeof exports&&"undefined"!=typeof module?module.exports=n():"function"==typeof define&&define.amd?define(n):(t=t||self,t.extractColors=n())}(this,function(){"use strict";var t=class t{constructor(t,n,e,i){this.isColor=!0,this.red=t,this.green=n,this.blue=e,this.hex=i,this.count=1}distance(t){return Math.abs(t.red-this.red)+Math.abs(t.green-this.green)+Math.abs(t.blue-this.blue)}getWeight(t){return this.count+this.getSaturation()*t}getSaturation(){return void 0===this.saturation&&(this.saturation=Math.max(Math.abs(this.red-this.green),Math.abs(this.red-this.blue),Math.abs(this.green-this.blue))),this.saturation}},n=class n{constructor(){this.count=1,this.children={}}addGroup(t){return this.children[t]?this.children[t].count++:this.children[t]=new n,this.children[t]}addColor(n,e,i,o){return this.children[n]?this.children[n].count++:this.children[n]=new t(e,i,o,n),this.children[n]}getList(){return Object.keys(this.children).map(t=>this.children[t])}getMaxWeight(t){if(void 0===this.maxWeight){const n=this.getList().map(n=>n.isColor?n.getWeight(t):n.getMaxWeight(t));n.sort((t,n)=>n-t),this.maxWeight=n[0]||0}return this.maxWeight}getMaxWeightColor(t){const n=this.getList();return n.sort((n,e)=>{if(n.isColor)return e.getWeight(t)-n.getWeight(t);return e.getMaxWeight(t)-n.getMaxWeight(t)}),n[0].isColor?n[0]:n[0].getMaxWeightColor(t)}getColors(t,n){const e=this.getList().map(t=>{const e=t.count;const i=t.getMaxWeightColor(n);i.count=e;return i});e.sort((t,e)=>e.getWeight(n)-t.getWeight(n));const i=[];return e.forEach(n=>{const e=i.find(e=>e.distance(n)<t);e?e.count+=n.count:i.push(n)}),i}},e=class t{constructor(t,{pixels:pixels=1e4,distance:distance=150,saturationImportance:saturationImportance=5,splitPower:splitPower=10,colorValidator:colorValidator=((red,green,blue,alpha=255)=>alpha>250)}={}){this.pixels=pixels,this.splitPower=splitPower,this.distance=distance,this.saturationImportance=saturationImportance,this.colorValidator=colorValidator}process(t){const e=new n,i=this.splitPower;for(let n=0;n<t.length;n+=4){const o=t[n],r=t[n+1],s=t[n+2],h=t[n+3];if(this.colorValidator(o,r,s,h)){const t=o<<16|r<<8|s,n=(o>>4&15)<<2|(r>>4&15)<<1|s>>4&15,h=Math.round(o*(i-1)/255)*(i*i)+Math.round(r*(i-1)/255)*i+Math.round(s*(i-1)/255);e.addGroup(h).addGroup(n).addColor(t,o,r,s)}}return e.getColors(this.distance,this.saturationImportance)}extract(t){return this.process(t).map(t=>({hex:"#"+"0".repeat(6-t.hex.toString(16).length)+t.hex.toString(16),red:t.red,green:t.green,blue:t.blue,area:t.count/this.pixels,saturation:t.saturation/255}))}};const i=(t,n)=>{const e=t.width*t.height;const i=e<n?t.width:Math.round(t.width*Math.sqrt(n/e));const o=e<n?t.height:Math.round(t.height*Math.sqrt(n/e));const r=document.createElement("canvas");r.width=i;r.height=o;const s=r.getContext("2d");s.drawImage(t,0,0,t.width,t.height,0,0,i,o);return s.getImageData(0,0,i,o)};return(t,n)=>new Promise((o,r)=>{const s=new Image;const h=()=>{s.removeEventListener("load",h);const t=new e(n);const o=i(s,t.pixels).data;return t.extract(o)};s.addEventListener("load",h);s.src=t})});

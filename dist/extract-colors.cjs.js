class Color{constructor(t,r,o,e){this.isColor=!0,this.red=t,this.green=r,this.blue=o,this.hex=e,this.count=1}distance(t){return Math.abs(t.red-this.red)+Math.abs(t.green-this.green)+Math.abs(t.blue-this.blue)}getWeight(t){return this.count+this.getSaturation()*t}getSaturation(){return void 0===this.saturation&&(this.saturation=Math.max(Math.abs(this.red-this.green),Math.abs(this.red-this.blue),Math.abs(this.green-this.blue))),this.saturation}}class ColorGroup{constructor(){this.count=1,this.children={}}addGroup(t){return this.children[t]?this.children[t].count++:this.children[t]=new ColorGroup,this.children[t]}addColor(t,r,o,e){return this.children[t]?this.children[t].count++:this.children[t]=new Color(r,o,e,t),this.children[t]}getList(){return Object.keys(this.children).map(t=>this.children[t])}getMaxWeight(t){if(void 0===this.maxWeight){const r=this.getList().map(r=>r.isColor?r.getWeight(t):r.getMaxWeight(t));r.sort((t,r)=>r-t),this.maxWeight=r[0]||0}return this.maxWeight}getMaxWeightColor(t){const r=this.getList();return r.sort((r,o)=>{if(r.isColor)return o.getWeight(t)-r.getWeight(t);return o.getMaxWeight(t)-r.getMaxWeight(t)}),r[0].isColor?r[0]:r[0].getMaxWeightColor(t)}getColors(t,r){const o=this.getList().map(t=>{const o=t.count;const e=t.getMaxWeightColor(r);e.count=o;return e});o.sort((t,o)=>o.getWeight(r)-t.getWeight(r));const e=[];return o.forEach(r=>{const o=e.find(o=>o.distance(r)<t);o?o.count+=r.count:e.push(r)}),e}}const testUint=(t,r,o=0,e=Number.MAX_SAFE_INTEGER)=>{if(!Number.isInteger(r)||r<o||r>e)throw new Error(t+" is invalid");return parseInt(r)},testNumber=(t,r,o=0,e=Number.MAX_VALUE)=>{if(Number(r)!=r||r<o||r>e)throw new Error(t+" is invalid");return Number(r)},testFunction=(t,r)=>{if(!r||"[object Function]"!=={}.toString.call(r))throw new Error(t+" is invalid");return r};class ColorsExtractor{constructor({pixels:pixels=ColorsExtractor.pixelsDefault,distance:distance=ColorsExtractor.distanceDefault,saturationImportance:saturationImportance=ColorsExtractor.saturationImportanceDefault,splitPower:splitPower=ColorsExtractor.splitPowerDefault,colorValidator:colorValidator=ColorsExtractor.colorValidatorDefault}={}){this.pixels=testUint("pixels",pixels,1),this.splitPower=testNumber("splitPower",splitPower,2,16),this.distance=testUint("distance",distance,1,762),this.saturationImportance=testNumber("saturationImportance",saturationImportance,0),this.colorValidator=testFunction("colorValidator",colorValidator)}process(t){const r=new ColorGroup,o=this.splitPower;for(let e=0;e<t.length;e+=4){const n=t[e],i=t[e+1],a=t[e+2],s=t[e+3];if(this.colorValidator(n,i,a,s)){const t=n<<16|i<<8|a,e=(n>>4&15)<<2|(i>>4&15)<<1|a>>4&15,s=Math.round(n*(o-1)/255)*(o*o)+Math.round(i*(o-1)/255)*o+Math.round(a*(o-1)/255);r.addGroup(s).addGroup(e).addColor(t,n,i,a)}}return r.getColors(this.distance,this.saturationImportance)}extract(t){return this.process(t).map(t=>({hex:"#"+"0".repeat(6-t.hex.toString(16).length)+t.hex.toString(16),red:t.red,green:t.green,blue:t.blue,area:t.count/this.pixels,saturation:t.saturation/255}))}}ColorsExtractor.pixelsDefault=1e4,ColorsExtractor.distanceDefault=150,ColorsExtractor.saturationImportanceDefault=5,ColorsExtractor.splitPowerDefault=10,ColorsExtractor.colorValidatorDefault=((t,r,o,e=255)=>e>250);const{createCanvas:createCanvas,loadImage:loadImage}=require("canvas"),getImageData=(t,r)=>{const o=t.width*t.height;const e=o<r?t.width:Math.round(t.width*Math.sqrt(r/o));const n=o<r?t.height:Math.round(t.height*Math.sqrt(r/o));const i=createCanvas(e,n);const a=i.getContext("2d");a.drawImage(t,0,0,t.width,t.height,0,0,e,n);return a.getImageData(0,0,e,n)},extractColorsFromImageData=(t,r)=>{const o=new ColorsExtractor(r);return o.extract(t.data)},extractColorsFromSrc=(t,r)=>loadImage(t).then(t=>{const o=new ColorsExtractor(r);const e=getImageData(t,o.pixels);return o.extract(e.data)}),extractColors=(t,r)=>{if(t.width&&t.height&&t.data&&t.data.length)return new Promise(o=>{o(extractColorsFromImageData(t,r))});return extractColorsFromSrc(t,r)};module.exports={extractColorsFromImageData:extractColorsFromImageData,extractColorsFromSrc:extractColorsFromSrc,extractColors:extractColors};

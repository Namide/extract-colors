"use strict";function _interopDefault(t){return t&&"object"==typeof t&&"default"in t?t.default:t}var canvas=_interopDefault(require("canvas"));class Color{constructor(t,e,n,i){this.isColor=!0,this.red=t,this.green=e,this.blue=n,this.hex=i,this.count=1}distance(t){return Math.abs(t.red-this.red)+Math.abs(t.green-this.green)+Math.abs(t.blue-this.blue)}getWeight(t){return this.count+this.getSaturation()*t}getSaturation(){return void 0===this.saturation&&(this.saturation=Math.max(Math.abs(this.red-this.green),Math.abs(this.red-this.blue),Math.abs(this.green-this.blue))),this.saturation}}class ColorGroup{constructor(){this.count=1,this.children={}}addGroup(t){return this.children[t]?this.children[t].count++:this.children[t]=new ColorGroup,this.children[t]}addColor(t,e,n,i){return this.children[t]?this.children[t].count++:this.children[t]=new Color(e,n,i,t),this.children[t]}getList(){return Object.keys(this.children).map(t=>this.children[t])}getMaxWeight(t){if(void 0===this.maxWeight){const e=this.getList().map(e=>e.isColor?e.getWeight(t):e.getMaxWeight(t));e.sort((t,e)=>e-t),this.maxWeight=e[0]||0}return this.maxWeight}getMaxWeightColor(t){const e=this.getList();return e.sort((e,n)=>{if(e.isColor)return n.getWeight(t)-e.getWeight(t);return n.getMaxWeight(t)-e.getMaxWeight(t)}),e[0].isColor?e[0]:e[0].getMaxWeightColor(t)}getColors(t,e){const n=this.getList().map(t=>{const n=t.count;const i=t.getMaxWeightColor(e);i.count=n;return i});n.sort((t,n)=>n.getWeight(e)-t.getWeight(e));const i=[];return n.forEach(e=>{const n=i.find(n=>n.distance(e)<t);n?n.count+=e.count:i.push(e)}),i}}class ColorsExtractor{constructor(t,{pixels:pixels=1e4,distance:distance=150,saturationImportance:saturationImportance=5,splitPower:splitPower=10,colorValidator:colorValidator=((red,green,blue,alpha=255)=>alpha>250)}={}){this.pixels=pixels,this.splitPower=splitPower,this.distance=distance,this.saturationImportance=saturationImportance,this.colorValidator=colorValidator}process(t){const e=new ColorGroup,n=this.splitPower;for(let i=0;i<t.length;i+=4){const o=t[i],r=t[i+1],a=t[i+2],s=t[i+3];if(this.colorValidator(o,r,a,s)){const t=o<<16|r<<8|a,i=(o>>4&15)<<2|(r>>4&15)<<1|a>>4&15,s=Math.round(o*(n-1)/255)*(n*n)+Math.round(r*(n-1)/255)*n+Math.round(a*(n-1)/255);e.addGroup(s).addGroup(i).addColor(t,o,r,a)}}return e.getColors(this.distance,this.saturationImportance)}extract(t){return this.process(t).map(t=>({hex:"#"+"0".repeat(6-t.hex.toString(16).length)+t.hex.toString(16),red:t.red,green:t.green,blue:t.blue,area:t.count/this.pixels,saturation:t.saturation/255}))}}const{createCanvas:createCanvas,loadImage:loadImage}=canvas,getImageData=(t,e)=>{const n=t.width*t.height;const i=n<e?t.width:Math.round(t.width*Math.sqrt(e/n));const o=n<e?t.height:Math.round(t.height*Math.sqrt(e/n));const r=createCanvas(i,o);const a=r.getContext("2d");a.drawImage(t,0,0,t.width,t.height,0,0,i,o);return a.getImageData(0,0,i,o)};var extractColorsModule=(t,e)=>loadImage(t).then(t=>{const n=new ColorsExtractor(e);const i=getImageData(t,n.pixels).data;return n.extract(i)});module.exports=extractColorsModule;

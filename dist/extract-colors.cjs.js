class Color{constructor(t,o,r,e=t<<16|o<<8|r){this.isColor=!0,this.red=t,this.green=o,this.blue=r,this.hex=e,this.count=1}distance(t){return(Math.abs(t.red-this.red)+Math.abs(t.green-this.green)+Math.abs(t.blue-this.blue))/765}getWeight(t,o){return this.count/o+this.getSaturation()*t}getSaturation(){return void 0===this.saturation&&(this.saturation=Math.max(Math.abs(this.red-this.green)/255,Math.abs(this.red-this.blue)/255,Math.abs(this.green-this.blue)/255)),this.saturation}}class ColorGroup{constructor(){this.count=1,this.children={}}addGroup(t){return this.children[t]?this.children[t].count++:this.children[t]=new ColorGroup,this.children[t]}addColor(t,o,r,e){return this.children[t]?this.children[t].count++:this.children[t]=new Color(o,r,e,t),this.children[t]}getList(){return Object.keys(this.children).map(t=>this.children[t])}getMaxWeight(t,o){if(void 0===this.maxWeight){const r=this.getList().map(r=>r.isColor?r.getWeight(t,o):r.getMaxWeight(t,o));r.sort((t,o)=>o-t),this.maxWeight=r[0]||0}return this.maxWeight}getMaxWeightColor(t,o){const r=this.getList();return r.sort((r,e)=>{if(r.isColor)return e.getWeight(t,o)-r.getWeight(t,o);return e.getMaxWeight(t,o)-r.getMaxWeight(t,o)}),r[0].isColor?r[0]:r[0].getMaxWeightColor(t,o)}getMaxCountColor(){const t=this.getList();return t.sort((t,o)=>{if(t.isColor)return o.count-t.count;return o.getMaxCountColor()-t.getMaxCountColor()}),t[0].isColor?t[0]:t[0].getMaxCountColor()}getColors(t,o,r){const e=this.getList().map(t=>{const o=t.count;const r=t.getMaxCountColor();r.count=o;return r});e.sort((t,e)=>e.getWeight(o,r)-t.getWeight(o,r));const n=[];return e.forEach(o=>{const r=n.find(r=>r.distance(o)<t);r?r.count+=o.count:n.push(o)}),n}}const testUint=(t,o,r=0,e=Number.MAX_SAFE_INTEGER)=>{if(!Number.isInteger(o)||o<r||o>e)throw new Error(t+" is invalid");return parseInt(o)},testNumber=(t,o,r=0,e=Number.MAX_VALUE)=>{if(Number(o)!=o||o<r||o>e)throw new Error(t+" is invalid");return Number(o)},testFunction=(t,o)=>{if(!o||"[object Function]"!=={}.toString.call(o))throw new Error(t+" is invalid");return o};class ColorsExtractor{constructor({pixels:pixels=ColorsExtractor.pixelsDefault,distance:distance=ColorsExtractor.distanceDefault,saturationImportance:saturationImportance=ColorsExtractor.saturationImportanceDefault,splitPower:splitPower=ColorsExtractor.splitPowerDefault,colorValidator:colorValidator=ColorsExtractor.colorValidatorDefault}={}){this.pixels=testUint("pixels",pixels,1),this.splitPower=testNumber("splitPower",splitPower,2,16),this.distance=testNumber("distance",distance,0,1),this.saturationImportance=testNumber("saturationImportance",saturationImportance,0),this.colorValidator=testFunction("colorValidator",colorValidator)}process(t){const o=new ColorGroup,r=this.splitPower;for(let e=0;e<t.length;e+=4){const n=t[e],i=t[e+1],a=t[e+2],s=t[e+3];if(this.colorValidator(n,i,a,s)){const t=n<<16|i<<8|a,e=(n>>4&15)<<2|(i>>4&15)<<1|a>>4&15,s=Math.round(n*(r-1)/255)*(r*r)+Math.round(i*(r-1)/255)*r+Math.round(a*(r-1)/255);o.addGroup(s).addGroup(e).addColor(t,n,i,a)}}return o.getColors(this.distance,this.saturationImportance,this.pixels)}extract(t){return this.process(t).map(t=>({hex:"#"+"0".repeat(6-t.hex.toString(16).length)+t.hex.toString(16),red:t.red,green:t.green,blue:t.blue,area:t.count/this.pixels,saturation:t.saturation/255}))}}ColorsExtractor.pixelsDefault=1e4,ColorsExtractor.distanceDefault=.2,ColorsExtractor.saturationImportanceDefault=.2,ColorsExtractor.splitPowerDefault=10,ColorsExtractor.colorValidatorDefault=((t,o,r,e=255)=>e>250);const{createCanvas:createCanvas,loadImage:loadImage}=require("canvas"),getImageData=(t,o)=>{const r=t.width*t.height;const e=r<o?t.width:Math.round(t.width*Math.sqrt(o/r));const n=r<o?t.height:Math.round(t.height*Math.sqrt(o/r));const i=createCanvas(e,n);const a=i.getContext("2d");a.drawImage(t,0,0,t.width,t.height,0,0,e,n);return a.getImageData(0,0,e,n)},extractColorsFromImageData=(t,o)=>{const r=new ColorsExtractor(o);return r.extract(t.data)},extractColorsFromSrc=(t,o)=>loadImage(t).then(t=>{const r=new ColorsExtractor(o);const e=getImageData(t,r.pixels);return r.extract(e.data)}),extractColors=(t,o)=>{if(t.width&&t.height&&t.data&&t.data.length)return new Promise(r=>{r(extractColorsFromImageData(t,o))});return extractColorsFromSrc(t,o)};module.exports={extractColorsFromImageData:extractColorsFromImageData,extractColorsFromSrc:extractColorsFromSrc,extractColors:extractColors};

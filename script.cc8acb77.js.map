{"version":3,"sources":["../src/color/Color.js","../src/color/ColorsGroup.js","../src/color/ColorsExtractor.js","../src/extractColorsBrowser.js","assets/script.js"],"names":["Color","red","green","blue","hex","isColor","count","color","Math","abs","saturationImportance","maxCount","getSaturation","undefined","_saturation","max","ColorGroup","children","key","Object","keys","map","maxWeight","list","getList","child","getWeight","getMaxWeight","sort","a","b","getMaxWeightColor","getMaxCountColor","distance","newList","forEach","near","find","col","push","testUint","label","val","min","Number","MAX_SAFE_INTEGER","isInteger","Error","parseInt","testNumber","MAX_VALUE","testFunction","toString","call","ColorsExtractor","pixels","pixelsDefault","distanceDefault","saturationImportanceDefault","splitPower","splitPowerDefault","colorValidator","colorValidatorDefault","data","rootGroup","ColorsGroup","acc","i","length","r","g","real","medium","small","round","addGroup","addColor","getColors","process","repeat","area","saturation","alpha","extractColors","getImageData","image","currentPixels","width","height","sqrt","canvas","document","createElement","context","getContext","drawImage","extractColorsFromImageData","imageData","options","colorsExtractor","extract","extractColorsFromImage","crossOrigin","Promise","resolve","complete","addEventListener","imageLoaded","removeEventListener","extractColorsFromSrc","src","Image","picture","ImageData","IMG_THEME","getRandImg","id","index","random","seed","getRandImgs","Array","fill","_","Input","srcs","randomFiles","uploadFile","event","target","files","file","URL","createObjectURL","ImgBlock","props","$template","colors","px","time","mounted","onload","naturalWidth","naturalHeight","initTime","Date","now","then","finally","shift","window","PetiteVue","createApp","mount"],"mappings":"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","file":"script.cc8acb77.js","sourceRoot":"../src-website","sourcesContent":["/**\n * Informations like saturation or count of pixels in image.\n *\n * @module Color\n * @memberof module:core\n */\n\n/**\n * @class\n * @classdesc Calculate some informations and store data about color.\n */\nexport default class Color {\n  /**\n   * Set red, green and blue colors to create the Color object.\n   *\n   * @param {Number} red  Red channel integer from 0 to 255\n   * @param {Number} green  Green channel integer from 0 to 255\n   * @param {Number} blue  Blue channel integer from 0 to 255\n   * @param {Number=} hex  Optional hexadecimal color from 0x000000 to 0xFFFFFF\n   * @returns {Color}\n   */\n  constructor (red, green, blue, hex = red << 16 | green << 8 | blue) {\n    this.isColor = true\n\n    this.red = red\n    this.green = green\n    this.blue = blue\n    this.hex = hex\n\n    this.count = 1\n  }\n\n  /**\n   * Distance between two colors.\n   * - Minimum is 0 (between two same colors)\n   * - Maximum is 1 (for example between black and white)\n   *\n   * @param {Color} color  Color to compare\n   * @returns {Number}\n   */\n  distance (color) {\n    return (Math.abs(color.red - this.red) + Math.abs(color.green - this.green) + Math.abs(color.blue - this.blue)) / (3 * 0xFF)\n  }\n\n  /**\n   * Weight of the color depends of his saturation and his count.\n   *\n   * @param {Number} saturationImportance  Determine the weight of the saturation for the calcul (from 0 to 1)\n   * @param {Number} maxCount  Number of pixels in the image.\n   * @returns {Number}\n   */\n  getWeight (saturationImportance, maxCount) {\n    return (this.count / maxCount) * (1 - saturationImportance) + this.getSaturation() * saturationImportance\n  }\n\n  /**\n   * Saturation of the color from 0 to 1.\n   *\n   * @returns {Number}\n   */\n  getSaturation () {\n    if (this._saturation === undefined) {\n      this._saturation = Math.max(\n        Math.abs(this.red - this.green) / 0xFF,\n        Math.abs(this.red - this.blue) / 0xFF,\n        Math.abs(this.green - this.blue) / 0xFF\n      )\n    }\n\n    return this._saturation\n  }\n}\n","import Color from './Color'\n\n/**\n * Group colors with algorithms to optimize and merge neighbors colors.\n *\n * @module ColorGroup\n * @memberof module:core\n */\n\n/**\n * @class\n * @classdesc Manage list of colors or groups.\n */\nexport default class ColorGroup {\n  /**\n   * Store colors or groups and count similiar groups in the image.\n   */\n  constructor () {\n    this.count = 1\n    this.children = { }\n  }\n\n  /**\n   * Add a key for a color, this key is a simplification to find neighboring colors.\n   * Neighboring colors has same key.\n   *\n   * @param {Number} key  Simplication of color\n   */\n  addGroup (key) {\n    if (this.children[key]) {\n      this.children[key].count++\n    } else {\n      this.children[key] = new ColorGroup()\n    }\n\n    return this.children[key]\n  }\n\n  /**\n   * Add color to the group.\n   *\n   * @param {Number} hex  Hexadecimal color from 0x000000 to 0xFFFFFF\n   * @param {Number} red  Integer red chanel from 0 to 255\n   * @param {Number} green  Integer green chanel from 0 to 255\n   * @param {Number} blue  Integer blue chanel from 0 to 255\n   */\n  addColor (hex, red, green, blue) {\n    if (this.children[hex]) {\n      this.children[hex].count++\n    } else {\n      this.children[hex] = new Color(red, green, blue, hex)\n    }\n\n    return this.children[hex]\n  }\n\n  /**\n   * Get list of groups of list of colors.\n   */\n  getList () {\n    return Object.keys(this.children)\n      .map((key) => this.children[key])\n  }\n\n  /**\n   * Max color weight between the children colors, depends of his saturation and his count.\n   *\n   * @param {Number} saturationImportance  Determine the weight of the saturation for the calcul (from 0 to 1)\n   * @param {Number} count  Number of pixels in the image.\n   * @returns {Number}\n   */\n  getMaxWeight (saturationImportance, count) {\n    if (this.maxWeight === undefined) {\n      const list = this.getList()\n        .map((child) => (child.isColor ? child.getWeight(saturationImportance, count) : child.getMaxWeight(saturationImportance, count)))\n\n      list.sort((a, b) => b - a)\n      this.maxWeight = list[0] || 0\n    }\n\n    return this.maxWeight\n  }\n\n  /**\n   * Color with the the max weight between the children colors, depends of his saturation and his count.\n   *\n   * @param {Number} saturationImportance  Determine the weight of the saturation for the calcul (from 0 to 1)\n   * @param {Number} count  Number of pixels in the image.\n   * @returns {Color}\n   */\n  getMaxWeightColor (saturationImportance, count) {\n    const list = this.getList()\n    list.sort((a, b) => {\n      if (a.isColor) {\n        return b.getWeight(saturationImportance, count) - a.getWeight(saturationImportance, count)\n      }\n      return b.getMaxWeight(saturationImportance, count) - a.getMaxWeight(saturationImportance, count)\n    })\n\n    return list[0].isColor ? list[0] : list[0].getMaxWeightColor(saturationImportance, count)\n  }\n\n  /**\n   * Max count of colors for a group of colors.\n   *\n   * @returns {Number}\n   */\n  getMaxCountColor () {\n    const list = this.getList()\n    list.sort((a, b) => {\n      if (a.isColor) {\n        return b.count - a.count\n      }\n      return b.getMaxCountColor() - a.getMaxCountColor()\n    })\n\n    return list[0].isColor ? list[0] : list[0].getMaxCountColor()\n  }\n\n  /**\n   * List of colors sorted by importance (neighboring hare calculated by distance and removed).\n   * Importance is calculated with the saturation and count of neighboring colors.\n   *\n   * @param {Number} distance  Minimum distance between colors (from 0 to 1)\n   * @param {Number} saturationImportance  Determine the weight of the saturation for the calcul (from 0 to 1)\n   * @param {Number} count  Total pixels of image\n   * @returns {Array<Color>}\n   */\n  getColors (distance, saturationImportance, count) {\n    const list = this.getList()\n      .map((child) => {\n        const { count } = child\n        const color = child.getMaxCountColor()\n        color.count = count\n        return color\n      })\n\n    list.sort((a, b) => b.getWeight(saturationImportance, count) - a.getWeight(saturationImportance, count))\n\n    const newList = []\n    list.forEach((color) => {\n      const near = newList.find((col) => col.distance(color) < distance)\n      if (!near) {\n        newList.push(color)\n      } else {\n        near.count += color.count\n      }\n    })\n\n    return newList\n  }\n}\n","import ColorsGroup from './ColorsGroup'\n\n/**\n * Process to extract main colors from list of colors.\n *\n * @module ColorsExtractor\n * @memberof module:core\n */\n\n/**\n * Test if value is an integer.\n *\n * @param {String} label\n * @param {Number} val\n * @param {Number} min\n * @param {Number} max\n */\nconst testUint = (label, val, min = 0, max = Number.MAX_SAFE_INTEGER) => {\n  if (!Number.isInteger(val) || val < min || val > max) {\n    throw new Error(`${label} is invalid`)\n  }\n\n  return parseInt(val)\n}\n\n/**\n * Test if value is a number.\n *\n * @param {String} label\n * @param {Number} val\n * @param {Number} min\n * @param {Number} max\n */\nconst testNumber = (label, val, min = 0, max = Number.MAX_VALUE) => {\n  if (Number(val) !== val || val < min || val > max) {\n    throw new Error(`${label} is invalid`)\n  }\n\n  return Number(val)\n}\n\n/**\n * Test if value is a function.\n *\n * @param {String} label\n * @param {Function} val\n */\nconst testFunction = (label, val) => {\n  if (!val || {}.toString.call(val) !== '[object Function]') {\n    throw new Error(`${label} is invalid`)\n  }\n\n  return val\n}\n\n/**\n * @class\n * @classdesc Process to extract neighboring colors.\n */\nexport default class ColorsExtractor {\n  /**\n   * @param {Object=} options  Optional data\n   * @param {String=} options.pixels  Total pixel number of the resized picture for calculation\n   * @param {String=} options.distance  From 0 to 1 is the color distance to not have near colors (1 distance is between white and black)\n   * @param {String=} options.saturationImportance  Power of the saturation weight during the process (0 is not used, 1 is only saturation and not area size)\n   * @param {String=} options.splitPower  Approximation power in the first color splitting during process (from 2 to 16)\n   * @param {String=} options.colorValidator  Callback with test to enable only some colors\n   */\n  constructor ({\n    pixels = ColorsExtractor.pixelsDefault,\n    distance = ColorsExtractor.distanceDefault,\n    saturationImportance = ColorsExtractor.saturationImportanceDefault,\n    splitPower = ColorsExtractor.splitPowerDefault,\n    colorValidator = ColorsExtractor.colorValidatorDefault\n  } = {}) {\n    this.pixels = testUint('pixels', pixels, 1)\n    this.splitPower = testNumber('splitPower', splitPower, 2, 16)\n    this.distance = testNumber('distance', distance, 0, 1)\n    this.saturationImportance = testNumber('saturationImportance', saturationImportance, 0, 1)\n    this.colorValidator = testFunction('colorValidator', colorValidator)\n  }\n\n  /**\n   * Run extract process and get list of colors.\n   *\n   * @param {Array<Number>} data  List of colors with an array of flat colors by chanels with 0 to 255 per chanel (red, green, blue, alpha)\n   * @returns {Array<Color>}\n   */\n  process (data) {\n    const rootGroup = new ColorsGroup()\n    const acc = this.splitPower\n\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i] // 0 -> 255\n      const g = data[i + 1]\n      const b = data[i + 2]\n      const a = data[i + 3]\n\n      if (this.colorValidator(r, g, b, a)) {\n        const real = r << 16 | g << 8 | b\n        const medium = (r >> 4 & 0xF) << 2 | (g >> 4 & 0xF) << 1 | (b >> 4 & 0xF)\n        const small = Math.round(r * (acc - 1) / 255) * (acc * acc) + Math.round(g * (acc - 1) / 255) * acc + Math.round(b * (acc - 1) / 255)\n\n        const smallGroup = rootGroup.addGroup(small)\n        const mediumGroup = smallGroup.addGroup(medium)\n        mediumGroup.addColor(real, r, g, b)\n      }\n    }\n\n    return rootGroup.getColors(this.distance, this.saturationImportance, this.pixels)\n  }\n\n  /**\n   * Extract colors from data.\n   *\n   * @param {Array<Number>} data  List of colors with an array of flat colors by chanels with 0 to 255 per chanel (red, green, blue, alpha)\n   * @returns {Array<Object>} { hex, red, green, blue, area, saturation }\n   */\n  extract (data) {\n    return this.process(data)\n      .map((color) => ({\n        hex: `#${'0'.repeat(6 - color.hex.toString(16).length)}${color.hex.toString(16)}`,\n        red: color.red,\n        green: color.green,\n        blue: color.blue,\n        area: color.count / this.pixels,\n        saturation: color.getSaturation()\n      }))\n  }\n}\n\nColorsExtractor.pixelsDefault = 10000\nColorsExtractor.distanceDefault = 0.2\nColorsExtractor.saturationImportanceDefault = 0.2\nColorsExtractor.splitPowerDefault = 10\nColorsExtractor.colorValidatorDefault = (red, green, blue, alpha = 255) => alpha > 250\n","import ColorsExtractor from './color/ColorsExtractor'\n\n/**\n * Browser exported functions.\n *\n * @example\n * import extractColors from 'extract-colors'\n *\n * const src = 'my-image.jpg'\n *\n * extractColors(src)\n *   .then(console.log)\n *   .catch(console.error)\n *\n * @module Browser\n * @memberof browser\n */\n\n/**\n * Extract ImageData from image.\n * Reduce image to a pixel count.\n *\n * @param {Image} image  Source image\n * @param {Number} pixels  Maximum number of pixels for process\n * @returns {ImageData}\n */\nconst getImageData = (image, pixels) => {\n  const currentPixels = image.width * image.height\n  const width = currentPixels < pixels ? image.width : Math.round(image.width * Math.sqrt(pixels / currentPixels))\n  const height = currentPixels < pixels ? image.height : Math.round(image.height * Math.sqrt(pixels / currentPixels))\n\n  const canvas = document.createElement('canvas')\n  canvas.width = width\n  canvas.height = height\n\n  const context = canvas.getContext('2d')\n  context.drawImage(image, 0, 0, image.width, image.height, 0, 0, width, height)\n\n  return context.getImageData(0, 0, width, height)\n}\n\n/**\n * Extract colors from an ImageData object.\n *\n * @param {ImageData} imageData\n * @param {Object=} options  Optional data\n * @param {String=} options.pixels  Total pixel number of the resized picture for calculation\n * @param {String=} options.distance  From 0 to 1 is the color distance to not have near colors (1 distance is between white and black)\n * @param {String=} options.saturationImportance  Power of the saturation weight during the process (0 is not used, 1 is only saturation and not area size)\n * @param {String=} options.splitPower  Approximation power in the first color splitting during process (from 2 to 16)\n * @param {String=} options.colorValidator  Callback with test to enable only some colors\n * @returns {Array<Object>}\n */\nconst extractColorsFromImageData = (imageData, options) => {\n  const colorsExtractor = new ColorsExtractor(options)\n  return colorsExtractor.extract(imageData.data)\n}\n\n/**\n * Extract colors from an Image object.\n *\n * @param {Image} image\n * @param {Object=} options  Optional data\n * @param {String=} options.pixels  Total pixel number of the resized picture for calculation\n * @param {String=} options.distance  From 0 to 1 is the color distance to not have near colors (1 distance is between white and black)\n * @param {String=} options.saturationImportance  Power of the saturation weight during the process (0 is not used, 1 is only saturation and not area size)\n * @param {String=} options.splitPower  Approximation power in the first color splitting during process (from 2 to 16)\n * @param {String=} options.colorValidator  Callback with test to enable only some colors\n * @returns {Array<Object>}\n */\nconst extractColorsFromImage = (image, options) => {\n  image.crossOrigin = (options && options.crossOrigin) || null\n  return new Promise((resolve) => {\n    const extract = (image, options) => {\n      const colorsExtractor = new ColorsExtractor(options)\n      const imageData = getImageData(image, colorsExtractor.pixels)\n      resolve(colorsExtractor.extract(imageData.data))\n    }\n\n    if (image.complete) {\n      extract(image, options)\n    } else {\n      const imageLoaded = () => {\n        image.removeEventListener('load', imageLoaded)\n        extract(image, options)\n      }\n      image.addEventListener('load', imageLoaded)\n    }\n  })\n}\n\n/**\n * Extract colors from a path.\n * The image will be downloaded.\n *\n * @param {String} src\n * @param {Object=} options  Optional data\n * @param {String=} options.pixels  Total pixel number of the resized picture for calculation\n * @param {String=} options.distance  From 0 to 1 is the color distance to not have near colors (1 distance is between white and black)\n * @param {String=} options.saturationImportance  Power of the saturation weight during the process (0 is not used, 1 is only saturation and not area size)\n * @param {String=} options.splitPower  Approximation power in the first color splitting during process (from 2 to 16)\n * @param {String=} options.colorValidator  Callback with test to enable only some colors\n * @returns {Array<Object>}\n */\nconst extractColorsFromSrc = (src, options) => {\n  const image = new Image()\n  image.src = src\n  return extractColorsFromImage(image, options)\n}\n\n/**\n * Extract colors from a picture.\n *\n * @param {String|Image|ImageData} picture  Src, Image or ImageData\n * @param {Object=} options  Optional data\n * @param {String=} options.pixels  Total pixel number of the resized picture for calculation\n * @param {String=} options.distance  From 0 to 1 is the color distance to not have near colors (1 distance is between white and black)\n * @param {String=} options.saturationImportance  Power of the saturation weight during the process (0 is not used, 1 is only saturation and not area size)\n * @param {String=} options.splitPower  Approximation power in the first color splitting during process (from 2 to 16)\n * @param {String=} options.colorValidator  Callback with test to enable only some colors\n * @returns {Array<Object>}\n */\nconst extractColors = (picture, options) => {\n  if (picture instanceof ImageData) {\n    return new Promise((resolve) => {\n      resolve(extractColorsFromImageData(picture, options))\n    })\n  }\n\n  if (picture instanceof Image) {\n    return extractColorsFromImage(picture, options)\n  }\n\n  return extractColorsFromSrc(picture, options)\n}\n\nexport {\n  extractColorsFromImageData,\n  extractColorsFromImage,\n  extractColorsFromSrc\n}\n\nexport default extractColors\n","import extractColors from '../../src/extractColorsBrowser'\n\nconst IMG_THEME = ['moon', 'water', 'sea', 'colors', 'sky']\nconst process = []\n\nconst getRandImg = (id) => {\n  const index = Math.round(Math.random() * 20) + 5\n  const seed = IMG_THEME[id % IMG_THEME.length]\n  return `https://loremflickr.com/320/240/${seed}/?lock=${index}`\n}\n\nconst getRandImgs = count => Array(count).fill().map((_, i) => getRandImg(i))\n\nfunction Input () {\n  return {\n    pixels: 10000,\n    distance: 0.2,\n    saturationImportance: 0.2,\n    splitPower: 10,\n    srcs: getRandImgs(5),\n\n    get list () {\n      return this.srcs.map(src => ({\n        src,\n        id: src + this.pixels + this.distance + this.saturationImportance + this.splitPower\n      }))\n    },\n\n    randomFiles () {\n      this.srcs = getRandImgs(5)\n    },\n\n    uploadFile (event) {\n      this.srcs = [...event.target.files].map(file => URL.createObjectURL(file))\n    }\n  }\n}\n\nfunction ImgBlock (props) {\n  return {\n    $template: '#img-block',\n    colors: [],\n    px: '-',\n    time: '-',\n\n    mounted () {\n      const image = new Image()\n\n      image.crossOrigin = 'anonymous'\n      image.src = this.src\n      image.onload = () => {\n        this.px = Math.min(props.pixels, image.naturalWidth * image.naturalHeight)\n      }\n\n      const execProcess = () => {\n        const initTime = Date.now()\n        extractColors(this.src, {\n          pixels: props.pixels,\n          distance: props.distance,\n          saturationImportance: props.saturationImportance,\n          splitPower: props.splitPower,\n          crossOrigin: 'anonymous'\n        })\n          .then(colors => {\n            this.time = (Date.now() - initTime)\n            this.colors = colors\n          })\n          .finally(() => {\n            process.shift()\n            if (process.length > 0) {\n              process[0]()\n            }\n          })\n      }\n\n      process.push(execProcess)\n      if (process.length < 2) {\n        process[0]()\n      }\n    }\n  }\n}\n\nwindow.PetiteVue.createApp({ ImgBlock, Input }).mount()\n"]}
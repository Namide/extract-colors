{"version":3,"sources":["../src/color/Color.js","../src/color/ColorsGroup.js","../src/color/ColorsExtractor.js","../src/extractColorsBrowser.js","../node_modules/process/browser.js","assets/script.js"],"names":["Color","red","green","blue","hex","isColor","count","color","Math","abs","saturationImportance","maxCount","getSaturation","undefined","saturation","max","ColorGroup","children","key","Object","keys","map","maxWeight","list","getList","child","getWeight","getMaxWeight","sort","a","b","getMaxWeightColor","getMaxCountColor","distance","newList","forEach","near","find","col","push","testUint","label","val","min","Number","MAX_SAFE_INTEGER","isInteger","Error","parseInt","testNumber","MAX_VALUE","testFunction","toString","call","ColorsExtractor","pixels","pixelsDefault","distanceDefault","saturationImportanceDefault","splitPower","splitPowerDefault","colorValidator","colorValidatorDefault","data","rootGroup","ColorsGroup","acc","i","length","r","g","real","medium","small","round","addGroup","addColor","getColors","process","repeat","area","alpha","extractColors","getImageData","image","currentPixels","width","height","sqrt","canvas","document","createElement","context","getContext","drawImage","extractColorsFromImageData","imageData","options","colorsExtractor","extract","extractColorsFromImage","crossOrigin","Promise","resolve","complete","addEventListener","imageLoaded","removeEventListener","extractColorsFromSrc","src","Image","picture","ImageData","cachedSetTimeout","cachedClearTimeout","module","exports","defaultSetTimout","defaultClearTimeout","runTimeout","fun","setTimeout","e","runClearTimeout","marker","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","concat","drainQueue","timeout","len","run","Item","array","noop","nextTick","args","Array","arguments","prototype","apply","title","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","name","binding","cwd","chdir","dir","umask","realState","imgs","uploadFile","input","getElementById","onchange","target","files","file","URL","createObjectURL","click","randomFile","randomImgs","resetDisplay","body","querySelector","innerHTML","div","classList","add","style","appendChild","displayLog","index","pre","logs","log","append","querySelectorAll","displayImg","colors","state","initTime","img","join","naturalWidth","naturalHeight","Date","now","createImageData","loop","c","floor","pos","putImageData","update","console","random","directory","seed","values","require","imgSrc","promise","then","catch","gui","dat","GUI","step","onFinishChange"],"mappings":";AAuEG,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EA5DkBA,IAAAA,EA4DlB,WAjDYC,SAAAA,EAAAA,EAAKC,EAAOC,GAAMC,IAAAA,EAAMH,UAAAA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAAA,GAAO,GAAKC,GAAS,EAAIC,EAAM,EAAA,KAAA,GAC7DE,KAAAA,SAAU,EAEVJ,KAAAA,IAAMA,EACNC,KAAAA,MAAQA,EACRC,KAAAA,KAAOA,EACPC,KAAAA,IAAMA,EAENE,KAAAA,MAAQ,EAyCd,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,WA9BSC,MAAAA,SAAAA,GACD,OAACC,KAAKC,IAAIF,EAAMN,IAAM,KAAKA,KAAOO,KAAKC,IAAIF,EAAML,MAAQ,KAAKA,OAASM,KAAKC,IAAIF,EAAMJ,KAAO,KAAKA,OAAU,MA6BpH,CAAA,IAAA,YAnBUO,MAAAA,SAAAA,EAAsBC,GACvB,OAAA,KAAKL,MAAQK,GAAa,EAAID,GAAwB,KAAKE,gBAAkBF,IAkBtF,CAAA,IAAA,gBAVgB,MAAA,WASR,YARiBG,IAApB,KAAKC,aACFA,KAAAA,WAAaN,KAAKO,IACrBP,KAAKC,IAAI,KAAKR,IAAM,KAAKC,OAAS,IAClCM,KAAKC,IAAI,KAAKR,IAAM,KAAKE,MAAQ,IACjCK,KAAKC,IAAI,KAAKP,MAAQ,KAAKC,MAAQ,MAIhC,KAAKW,eACb,EAAA,GAAA,QAAA,QAAA;;AC+EA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAtJH,IAAA,EAAA,EAAA,QAAA,YAsJG,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAzIkBE,IAAAA,EAyIlB,WArIc,SAAA,IAAA,EAAA,KAAA,GACRV,KAAAA,MAAQ,EACRW,KAAAA,SAAW,GAmIjB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,WA1HSC,MAAAA,SAAAA,GAOD,OANH,KAAKD,SAASC,GACXD,KAAAA,SAASC,GAAKZ,QAEdW,KAAAA,SAASC,GAAO,IAAIF,EAGpB,KAAKC,SAASC,KAmHtB,CAAA,IAAA,WAxGSd,MAAAA,SAAAA,EAAKH,EAAKC,EAAOC,GAOlB,OANH,KAAKc,SAASb,GACXa,KAAAA,SAASb,GAAKE,QAEdW,KAAAA,SAASb,GAAO,IAAIJ,EAAJ,QAAUC,EAAKC,EAAOC,EAAMC,GAG5C,KAAKa,SAASb,KAiGtB,CAAA,IAAA,UA3FU,MAAA,WAAA,IAAA,EAAA,KACFe,OAAAA,OAAOC,KAAK,KAAKH,UACrBI,IAAI,SAACH,GAAQ,OAAA,EAAKD,SAASC,OAyF/B,CAAA,IAAA,eA/EaR,MAAAA,SAAAA,EAAsBJ,GAC9B,QAAmBO,IAAnB,KAAKS,UAAyB,CAC1BC,IAAAA,EAAO,KAAKC,UACfH,IAAI,SAACI,GAAWA,OAAAA,EAAMpB,QAAUoB,EAAMC,UAAUhB,EAAsBJ,GAASmB,EAAME,aAAajB,EAAsBJ,KAE3HiB,EAAKK,KAAK,SAACC,EAAGC,GAAMA,OAAAA,EAAID,IACnBP,KAAAA,UAAYC,EAAK,IAAM,EAGvB,OAAA,KAAKD,YAsEb,CAAA,IAAA,oBA5DkBZ,MAAAA,SAAAA,EAAsBJ,GACjCiB,IAAAA,EAAO,KAAKC,UAQXD,OAPPA,EAAKK,KAAK,SAACC,EAAGC,GACRD,OAAAA,EAAExB,QACGyB,EAAEJ,UAAUhB,EAAsBJ,GAASuB,EAAEH,UAAUhB,EAAsBJ,GAE/EwB,EAAEH,aAAajB,EAAsBJ,GAASuB,EAAEF,aAAajB,EAAsBJ,KAGrFiB,EAAK,GAAGlB,QAAUkB,EAAK,GAAKA,EAAK,GAAGQ,kBAAkBrB,EAAsBJ,KAmDpF,CAAA,IAAA,mBA3CmB,MAAA,WACZiB,IAAAA,EAAO,KAAKC,UAQXD,OAPPA,EAAKK,KAAK,SAACC,EAAGC,GACRD,OAAAA,EAAExB,QACGyB,EAAExB,MAAQuB,EAAEvB,MAEdwB,EAAEE,mBAAqBH,EAAEG,qBAG3BT,EAAK,GAAGlB,QAAUkB,EAAK,GAAKA,EAAK,GAAGS,qBAkC5C,CAAA,IAAA,YAtBUC,MAAAA,SAAAA,EAAUvB,EAAsBJ,GACnCiB,IAAAA,EAAO,KAAKC,UACfH,IAAI,SAACI,GACInB,IAAAA,EAAUmB,EAAVnB,MACFC,EAAQkB,EAAMO,mBAEbzB,OADPA,EAAMD,MAAQA,EACPC,IAGXgB,EAAKK,KAAK,SAACC,EAAGC,GAAMA,OAAAA,EAAEJ,UAAUhB,EAAsBJ,GAASuB,EAAEH,UAAUhB,EAAsBJ,KAE3F4B,IAAAA,EAAU,GAUTA,OATPX,EAAKY,QAAQ,SAAC5B,GACN6B,IAAAA,EAAOF,EAAQG,KAAK,SAACC,GAAQA,OAAAA,EAAIL,SAAS1B,GAAS0B,IACpDG,EAGHA,EAAK9B,OAASC,EAAMD,MAFpB4B,EAAQK,KAAKhC,KAMV2B,MACR,EAAA,GAAA,QAAA,QAAA;;ACdH,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAxIA,IAAA,EAAA,EAAA,QAAA,kBAwIA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAvHA,IAAMM,EAAW,SAACC,EAAOC,GAAKC,IAAAA,EAAM,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,EAAG5B,EAAM6B,UAAAA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAAA,OAAOC,iBAC9C,IAACD,OAAOE,UAAUJ,IAAQA,EAAMC,GAAOD,EAAM3B,EACzC,MAAA,IAAIgC,MAASN,GAAAA,OAAAA,EAAnB,gBAGKO,OAAAA,SAASN,IAWZO,EAAa,SAACR,EAAOC,GAAKC,IAAAA,EAAM,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,EAAG5B,EAAM6B,UAAAA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAAA,OAAOM,UAChDN,GAAAA,OAAOF,KAASA,GAAOA,EAAMC,GAAOD,EAAM3B,EACtC,MAAA,IAAIgC,MAASN,GAAAA,OAAAA,EAAnB,gBAGKG,OAAAA,OAAOF,IASVS,EAAe,SAACV,EAAOC,GACvB,IAACA,GAAiC,sBAA1B,GAAGU,SAASC,KAAKX,GACrB,MAAA,IAAIK,MAASN,GAAAA,OAAAA,EAAnB,gBAGKC,OAAAA,GAOYY,EA6ErB,WA7DU,SAAA,IAAJ,IAAA,EAAA,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GALFC,EAAAA,EAAAA,OAAAA,OAASD,IAAAA,EAAAA,EAAgBE,cAKnB,EAJNvB,EAAAA,EAAAA,SAAAA,OAAWqB,IAAAA,EAAAA,EAAgBG,gBAIrB,EAHN/C,EAAAA,EAAAA,qBAAAA,OAAuB4C,IAAAA,EAAAA,EAAgBI,4BAGjC,EAFNC,EAAAA,EAAAA,WAAAA,OAAaL,IAAAA,EAAAA,EAAgBM,kBAEvB,EADNC,EAAAA,EAAAA,eAAAA,OAAiBP,IAAAA,EAAAA,EAAgBQ,sBAC3B,EAAA,EAAA,KAAA,GACDP,KAAAA,OAASf,EAAS,SAAUe,EAAQ,GACpCI,KAAAA,WAAaV,EAAW,aAAcU,EAAY,EAAG,IACrD1B,KAAAA,SAAWgB,EAAW,WAAYhB,EAAU,EAAG,GAC/CvB,KAAAA,qBAAuBuC,EAAW,uBAAwBvC,EAAsB,EAAG,GACnFmD,KAAAA,eAAiBV,EAAa,iBAAkBU,GAwDzD,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,UA/CWE,MAAAA,SAAAA,GAIF,IAHCC,IAAAA,EAAY,IAAIC,EAAJ,QACZC,EAAM,KAAKP,WAERQ,EAAI,EAAGA,EAAIJ,EAAKK,OAAQD,GAAK,EAAG,CACjCE,IAAAA,EAAIN,EAAKI,GACTG,EAAIP,EAAKI,EAAI,GACbrC,EAAIiC,EAAKI,EAAI,GACbtC,EAAIkC,EAAKI,EAAI,GAEf,GAAA,KAAKN,eAAeQ,EAAGC,EAAGxC,EAAGD,GAAI,CAC7B0C,IAAAA,EAAOF,GAAK,GAAKC,GAAK,EAAIxC,EAC1B0C,GAAUH,GAAK,EAAI,KAAQ,GAAKC,GAAK,EAAI,KAAQ,EAAKxC,GAAK,EAAI,GAC/D2C,EAAQjE,KAAKkE,MAAML,GAAKH,EAAM,GAAK,MAAQA,EAAMA,GAAO1D,KAAKkE,MAAMJ,GAAKJ,EAAM,GAAK,KAAOA,EAAM1D,KAAKkE,MAAM5C,GAAKoC,EAAM,GAAK,KAE9GF,EAAUW,SAASF,GACPE,SAASH,GAC5BI,SAASL,EAAMF,EAAGC,EAAGxC,IAI9BkC,OAAAA,EAAUa,UAAU,KAAK5C,SAAU,KAAKvB,qBAAsB,KAAK6C,UA0B9E,CAAA,IAAA,UAjBWQ,MAAAA,SAAAA,GAAM,IAAA,EAAA,KACN,OAAA,KAAKe,QAAQf,GACjB1C,IAAI,SAACd,GAAW,MAAA,CACfH,IAAS,IAAA,OAAA,IAAI2E,OAAO,EAAIxE,EAAMH,IAAIgD,SAAS,IAAIgB,SAAU7D,OAAAA,EAAMH,IAAIgD,SAAS,KAC5EnD,IAAKM,EAAMN,IACXC,MAAOK,EAAML,MACbC,KAAMI,EAAMJ,KACZ6E,KAAMzE,EAAMD,MAAQ,EAAKiD,OACzBzC,WAAYP,EAAMO,WAAa,WASvC,EAAA,GAAA,QAAA,QAAA,EAJAwC,EAAgBE,cAAgB,IAChCF,EAAgBG,gBAAkB,GAClCH,EAAgBI,4BAA8B,GAC9CJ,EAAgBM,kBAAoB,GACpCN,EAAgBQ,sBAAwB,SAAC7D,EAAKC,EAAOC,GAAsB8E,OAAR,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,KAAgB;;ACOpEC,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,QAAAA,QAAAA,qBAAAA,QAAAA,uBAAAA,QAAAA,gCAAAA,EA/If,IAAA,EAAA,EAAA,QAAA,4BA+IeA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GArHf,IAAMC,EAAe,SAACC,EAAO7B,GACrB8B,IAAAA,EAAgBD,EAAME,MAAQF,EAAMG,OACpCD,EAAQD,EAAgB9B,EAAS6B,EAAME,MAAQ9E,KAAKkE,MAAMU,EAAME,MAAQ9E,KAAKgF,KAAKjC,EAAS8B,IAC3FE,EAASF,EAAgB9B,EAAS6B,EAAMG,OAAS/E,KAAKkE,MAAMU,EAAMG,OAAS/E,KAAKgF,KAAKjC,EAAS8B,IAE9FI,EAASC,SAASC,cAAc,UACtCF,EAAOH,MAAQA,EACfG,EAAOF,OAASA,EAEVK,IAAAA,EAAUH,EAAOI,WAAW,MAG3BD,OAFPA,EAAQE,UAAUV,EAAO,EAAG,EAAGA,EAAME,MAAOF,EAAMG,OAAQ,EAAG,EAAGD,EAAOC,GAEhEK,EAAQT,aAAa,EAAG,EAAGG,EAAOC,IAerCQ,EAA6B,SAACC,EAAWC,GAEtCC,OADiB,IAAI5C,EAAJ,QAAoB2C,GACrBE,QAAQH,EAAUjC,OAwF5BmB,QAAAA,2BAAAA,EAzEf,IAAMkB,EAAyB,SAAChB,EAAOa,GAE9B,OADPb,EAAMiB,YAAeJ,GAAWA,EAAQI,aAAgB,KACjD,IAAIC,QAAQ,SAACC,GACZJ,IAAAA,EAAU,SAACf,EAAOa,GAChBC,IAAAA,EAAkB,IAAI5C,EAAJ,QAAoB2C,GACtCD,EAAYb,EAAaC,EAAOc,EAAgB3C,QACtDgD,EAAQL,EAAgBC,QAAQH,EAAUjC,QAGxCqB,GAAAA,EAAMoB,SACRL,EAAQf,EAAOa,OACV,CAKLb,EAAMqB,iBAAiB,OAJH,SAAdC,IACJtB,EAAMuB,oBAAoB,OAAQD,GAClCP,EAAQf,EAAOa,SA2DRf,QAAAA,uBAAAA,EAvCf,IAAM0B,EAAuB,SAACC,EAAKZ,GAC3Bb,IAAAA,EAAQ,IAAI0B,MAEXV,OADPhB,EAAMyB,IAAMA,EACLT,EAAuBhB,EAAOa,IAoCxBf,QAAAA,qBAAAA,EArBf,IAAMA,EAAgB,SAAC6B,EAASd,GAE1Bc,OAAAA,aAAmBC,UACd,IAAIV,QAAQ,SAACC,GAClBA,EAAQR,EAA2BgB,EAASd,MAI5Cc,aAAmBD,MACdV,EAAuBW,EAASd,GAGlCW,EAAqBG,EAASd,IASxBf,EAAAA,EAAAA,QAAAA,QAAAA;;;;;AC9If,IAOI+B,EACAC,EARApC,EAAUqC,OAAOC,QAAU,GAU/B,SAASC,IACC,MAAA,IAAItE,MAAM,mCAEpB,SAASuE,IACC,MAAA,IAAIvE,MAAM,qCAsBpB,SAASwE,EAAWC,GACZP,GAAAA,IAAqBQ,WAEdA,OAAAA,WAAWD,EAAK,GAGvB,IAACP,IAAqBI,IAAqBJ,IAAqBQ,WAEzDA,OADPR,EAAmBQ,WACZA,WAAWD,EAAK,GAEvB,IAEOP,OAAAA,EAAiBO,EAAK,GAC/B,MAAME,GACA,IAEOT,OAAAA,EAAiB5D,KAAK,KAAMmE,EAAK,GAC1C,MAAME,GAEGT,OAAAA,EAAiB5D,KAAK,KAAMmE,EAAK,KAMpD,SAASG,EAAgBC,GACjBV,GAAAA,IAAuBW,aAEhBA,OAAAA,aAAaD,GAGpB,IAACV,IAAuBI,IAAwBJ,IAAuBW,aAEhEA,OADPX,EAAqBW,aACdA,aAAaD,GAEpB,IAEOV,OAAAA,EAAmBU,GAC5B,MAAOF,GACD,IAEOR,OAAAA,EAAmB7D,KAAK,KAAMuE,GACvC,MAAOF,GAGER,OAAAA,EAAmB7D,KAAK,KAAMuE,MAjEhD,WACO,IAEIX,EADsB,mBAAfQ,WACYA,WAEAJ,EAEzB,MAAOK,GACLT,EAAmBI,EAEnB,IAEIH,EADwB,mBAAjBW,aACcA,aAEAP,EAE3B,MAAOI,GACLR,EAAqBI,GAjB5B,GAwED,IAEIQ,EAFAC,EAAQ,GACRC,GAAW,EAEXC,GAAc,EAElB,SAASC,IACAF,GAAaF,IAGlBE,GAAW,EACPF,EAAa1D,OACb2D,EAAQD,EAAaK,OAAOJ,GAE5BE,GAAc,EAEdF,EAAM3D,QACNgE,KAIR,SAASA,IACDJ,IAAAA,EAAAA,CAGAK,IAAAA,EAAUd,EAAWW,GACzBF,GAAW,EAGLM,IADFA,IAAAA,EAAMP,EAAM3D,OACVkE,GAAK,CAGA,IAFPR,EAAeC,EACfA,EAAQ,KACCE,EAAaK,GACdR,GACAA,EAAaG,GAAYM,MAGjCN,GAAc,EACdK,EAAMP,EAAM3D,OAEhB0D,EAAe,KACfE,GAAW,EACXL,EAAgBU,IAiBpB,SAASG,EAAKhB,EAAKiB,GACVjB,KAAAA,IAAMA,EACNiB,KAAAA,MAAQA,EAYjB,SAASC,KA5BT5D,EAAQ6D,SAAW,SAAUnB,GACrBoB,IAAAA,EAAO,IAAIC,MAAMC,UAAU1E,OAAS,GACpC0E,GAAAA,UAAU1E,OAAS,EACd,IAAA,IAAID,EAAI,EAAGA,EAAI2E,UAAU1E,OAAQD,IAClCyE,EAAKzE,EAAI,GAAK2E,UAAU3E,GAGhC4D,EAAMxF,KAAK,IAAIiG,EAAKhB,EAAKoB,IACJ,IAAjBb,EAAM3D,QAAiB4D,GACvBT,EAAWa,IASnBI,EAAKO,UAAUR,IAAM,WACZf,KAAAA,IAAIwB,MAAM,KAAM,KAAKP,QAE9B3D,EAAQmE,MAAQ,UAEhBnE,EAAQoE,IAAM,GACdpE,EAAQqE,KAAO,GACfrE,EAAQsE,QAAU,GAClBtE,EAAQuE,SAAW,GAInBvE,EAAQwE,GAAKZ,EACb5D,EAAQyE,YAAcb,EACtB5D,EAAQ0E,KAAOd,EACf5D,EAAQ2E,IAAMf,EACd5D,EAAQ4E,eAAiBhB,EACzB5D,EAAQ6E,mBAAqBjB,EAC7B5D,EAAQ8E,KAAOlB,EACf5D,EAAQ+E,gBAAkBnB,EAC1B5D,EAAQgF,oBAAsBpB,EAE9B5D,EAAQiF,UAAY,SAAUC,GAAe,MAAA,IAE7ClF,EAAQmF,QAAU,SAAUD,GAClB,MAAA,IAAIjH,MAAM,qCAGpB+B,EAAQoF,IAAM,WAAqB,MAAA,KACnCpF,EAAQqF,MAAQ,SAAUC,GAChB,MAAA,IAAIrH,MAAM,mCAEpB+B,EAAQuF,MAAQ,WAAoB,OAAA;;;ACdpC,aAzKA,IAAA,EAAA,EAAA,QAAA,mCAyKA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,KAAA,GAAA,GAAA,OAAA,sBAAA,CAAA,IAAA,EAAA,OAAA,sBAAA,GAAA,IAAA,EAAA,EAAA,OAAA,SAAA,GAAA,OAAA,OAAA,yBAAA,EAAA,GAAA,cAAA,EAAA,KAAA,MAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,CAAA,IAAA,EAAA,MAAA,UAAA,GAAA,UAAA,GAAA,GAAA,EAAA,EAAA,EAAA,OAAA,IAAA,GAAA,QAAA,SAAA,GAAA,EAAA,EAAA,EAAA,EAAA,MAAA,OAAA,0BAAA,OAAA,iBAAA,EAAA,OAAA,0BAAA,IAAA,EAAA,OAAA,IAAA,QAAA,SAAA,GAAA,OAAA,eAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,MAAA,OAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,mDAAA,SAAA,EAAA,GAAA,GAAA,OAAA,YAAA,OAAA,IAAA,uBAAA,OAAA,UAAA,SAAA,KAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,CAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,EAAA,QAAA,EAAA,EAAA,OAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,GAvKA,IAAIC,EAAY,EACZC,EAAO,GAELtE,EAAU,CACd1C,OAAQ,IACRtB,SAAU,GACVvB,qBAAsB,GACtBiD,WAAY,GACZ6G,WAAc,WACZD,EAAO,GACDE,IAAAA,EAAQ/E,SAASgF,eAAe,aACtCD,EAAME,SAAW,SAAsB,GACjCC,EADuBA,EAAAA,OAChBC,OAAO1I,QAAQ,SAAA2I,GACxBP,EAAKhI,KAAKwI,IAAIC,gBAAgBF,MAEhChG,KAEF2F,EAAMQ,SAERC,WAAc,WACZX,EAAO,GACPY,IACArG,MAKEsG,EAAe,WACb7J,IAAAA,EAAOmE,SAAS2F,KAAKC,cAAc,SACzC/J,EAAKgK,UAAY,GAEjBhB,EAAKpI,QAAQ,SAAA0E,GACL2E,IAAAA,EAAM9F,SAASC,cAAc,OACnC6F,EAAIC,UAAUC,IAAI,SAGZtG,IAAAA,EAAQ,IAAI0B,MAClB1B,EAAMiB,YAAc,YACpBjB,EAAMyB,IAAMA,EACZzB,EAAMG,OAAS,IACfH,EAAMuG,MAAMrG,MAAQ,OACpBkG,EAAII,YAAYxG,GAEVK,IAAAA,EAASC,SAASC,cAAc,UACtCF,EAAOH,MAAQ,GACfG,EAAOF,OAASH,EAAMG,OACtBiG,EAAII,YAAYnG,GAEhBlE,EAAKqK,YAAYJ,MAIfK,EAAa,SAACC,GACZC,IAAAA,EAAMrG,SAASC,cAAc,OACnCoG,EAAIN,UAAUC,IAAI,MAAO,QAFGM,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EAAS,IAAA,MAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IAATA,EAAS,EAAA,GAAA,UAAA,GAIrCA,EAAK7J,QAAQ,SAAA8J,GACLT,IAAAA,EAAM9F,SAASC,cAAc,OACnC6F,EAAID,UAAYU,EAChBF,EAAIG,OAAOV,KAGC9F,SAAS2F,KAAKc,iBAAiB,gBAAgBL,GACvDI,OAAOH,IAGTK,EAAa,SAAgD,GAA7CC,IAAAA,EAAAA,EAAAA,OAAQP,EAAAA,EAAAA,MAAOQ,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,SAAUhJ,EAAAA,EAAAA,OAChD+I,GAAAA,IAAUhC,EACL,OAAA,EAGHkB,IAAAA,EAAM9F,SAAS2F,KAAKc,iBAAiB,gBAAgBL,GACrDrG,EAAS+F,EAAIF,cAAc,UAC3BkB,EAAMhB,EAAIF,cAAc,OAE9BO,EACEC,EACA,GAAGO,OAAAA,EAAOjI,OAAoBiI,aAAAA,EAAOhL,IAAI,SAAAd,GAA8CA,MAAAA,qCAAAA,OAAAA,EAAMH,IAA/C,gBAAgEqM,KAAK,KACnH,WAAajM,KAAKmC,IAAIY,EAAQiJ,EAAIE,aAAeF,EAAIG,eACrD,UAAYC,KAAKC,MAAQN,GAAY,MAK/B3G,IAAAA,EAAUH,EAAOI,WAAW,MAE5BG,EAAYJ,EAAQkH,gBAAgBrH,EAAOH,MAAOG,EAAOF,QACzDhC,EAASyC,EAAUjC,KAGzBgJ,EAAM,IAAK,IAAI1I,EAAI,EAAGA,EAAI2B,EAAUT,OAAQlB,IACrC,IAAA,IAAI2I,EAAI,EAAGA,EAAIhH,EAAUV,MAAO0H,IAAK,CAClC7I,IACA5D,EAAQ8L,EADJ7L,KAAKyM,MAAM5I,EAAIoB,EAAOH,QAG5B,IAAC/E,EAAewM,MAAAA,EAEdG,IAAAA,EAAO7I,GAAuB,EAAlB2B,EAAUV,OAAmB,EAAJ0H,EAC3CzJ,EAAO2J,EAAM,GAAK3M,EAAMN,IACxBsD,EAAO2J,EAAM,GAAK3M,EAAML,MACxBqD,EAAO2J,EAAM,GAAK3M,EAAMJ,KACxBoD,EAAO2J,EAAM,GAAK,IAOjB,OAHLtH,EAAQuH,aAAanH,EAAW,EAAG,IAG9B,GAGHoH,EAAS,SAACrJ,GACdsJ,QAAQpB,IAAIlI,EAAMkC,GAClBnB,KAGIqG,EAAa,WAAwC,IAAA,EAAA,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GAArCmC,EAAAA,EAAAA,OAAAA,OAAS,IAAA,GAAmC,EAA7BC,EAAAA,EAAAA,UAAAA,OAAY,IAAA,GAAiB,EAC5DD,EAED,CAAA,OAAQ,QAAS,MAAO,SAAU,OAAOnL,QAAQ,SAAAqL,GAC1C1B,IAAAA,EAAQtL,KAAKkE,MAAsB,GAAhBlE,KAAK8M,UAAiB,EAC/C/C,EAAKhI,KAAwCiL,mCAAAA,OAAAA,EAAc1B,WAAAA,OAAAA,MAEpDyB,GAETpM,OAAOsM,OAAOC,QAAQ,gBAAgBvL,QAAQ,SAAAwL,GAC5CpD,EAAKhI,KAAKoL,MAKV7I,EAAU,WAERwH,IAIFsB,EAJEtB,IADNhC,EAGAc,IAGAb,EAAKpI,QAAQ,SAAC0E,EAAKiF,GACb,GAAC8B,EAKHA,EACGC,KAAK,WACEtB,IAAAA,EAAWK,KAAKC,MACf,OAAA,EAAchG,EAAAA,SAAAA,EAAUZ,EAAAA,EAAAA,GAAAA,GAAxB,GAAA,CAAiCI,YAAa,eAClDwH,KAAK,SAAAxB,GAAUD,OAAAA,EAAU,EAAA,CAAGC,OAAAA,EAAQxF,IAAAA,EAAKiF,MAAAA,EAAOQ,MAAAA,EAAOC,SAAAA,GAAatG,YAT/D,CACNsG,IAAAA,EAAWK,KAAKC,MACtBe,GAAU,EAAc/G,EAAAA,SAAAA,EAAUZ,EAAAA,EAAAA,GAAAA,GAAxB,GAAA,CAAiCI,YAAa,eACrDwH,KAAK,SAAAxB,GAAUD,OAAAA,EAAU,EAAA,CAAGC,OAAAA,EAAQxF,IAAAA,EAAKiF,MAAAA,EAAOQ,MAAAA,EAAOC,SAAAA,GAAatG,SAWvE2H,GACFA,EAAQE,MAAMT,QAAQpB,MAIpB8B,EAAM,IAAIC,IAAIC,IACpBF,EAAIrC,IAAIzF,EAAS,SAAU,GAAGiI,KAAK,GAAGlE,KAAK,UAAUmE,eAAef,GACpEW,EAAIrC,IAAIzF,EAAS,WAAY,EAAG,GAAG+D,KAAK,YAAYmE,eAAef,GACnEW,EAAIrC,IAAIzF,EAAS,uBAAwB,EAAG,GAAG+D,KAAK,wBAAwBmE,eAAef,GAC3FW,EAAIrC,IAAIzF,EAAS,aAAc,EAAG,IAAI+D,KAAK,cAAcmE,eAAef,GAExEW,EAAIrC,IAAIzF,EAAS,cAAc+D,KAAK,iBACpC+D,EAAIrC,IAAIzF,EAAS,cAAc+D,KAAK,mBAEpC/D,EAAQiF","file":"script.9e3a1ef9.js","sourceRoot":"../src-website","sourcesContent":["/**\n * Informations like saturation or count of pixels in image.\n * \n * @module Color\n * @memberof module:core\n */\n\n/**\n * @class\n * @classdesc Calculate some informations and store data about color.\n */\nexport default class Color {\n\n  /**\n   * Set red, green and blue colors to create the Color object.\n   * \n   * @param {Number} red  Red channel integer from 0 to 255\n   * @param {Number} green  Green channel integer from 0 to 255\n   * @param {Number} blue  Blue channel integer from 0 to 255\n   * @param {Number=} hex  Optional hexadecimal color from 0x000000 to 0xFFFFFF\n   * @returns {Color}\n   */\n  constructor (red, green, blue, hex = red << 16 | green << 8 | blue) {\n    this.isColor = true\n\n    this.red = red\n    this.green = green\n    this.blue = blue\n    this.hex = hex\n\n    this.count = 1\n  }\n\n  /**\n   * Distance between two colors.\n   * - Minimum is 0 (between two same colors)\n   * - Maximum is 1 (for example between black and white)\n   * \n   * @param {Color} color  Color to compare\n   * @returns {Number}\n   */\n  distance (color) {\n    return (Math.abs(color.red - this.red) + Math.abs(color.green - this.green) + Math.abs(color.blue - this.blue)) / (3 * 0xFF)\n  }\n\n  /**\n   * Weight of the color depends of his saturation and his count.\n   * \n   * @param {Number} saturationImportance  Determine the weight of the saturation for the calcul (from 0 to 1)\n   * @param {Number} maxCount  Number of pixels in the image.\n   * @returns {Number}\n   */\n  getWeight (saturationImportance, maxCount) {\n    return (this.count / maxCount) * (1 - saturationImportance) + this.getSaturation() * saturationImportance\n  }\n\n  /**\n   * Saturation of the color from 0 to 1.\n   * \n   * @returns {Number}\n   */\n  getSaturation () {\n    if (this.saturation === undefined) {\n      this.saturation = Math.max(\n        Math.abs(this.red - this.green) / 0xFF,\n        Math.abs(this.red - this.blue) / 0xFF,\n        Math.abs(this.green - this.blue) / 0xFF\n      )\n    }\n\n    return this.saturation\n  }\n}\n","import Color from './Color'\n\n/**\n * Group colors with algorithms to optimize and merge neighbors colors.\n * \n * @module ColorGroup\n * @memberof module:core\n */\n\n/** \n * @class\n * @classdesc Manage list of colors or groups.\n */\nexport default class ColorGroup {\n  /**\n   * Store colors or groups and count similiar groups in the image.\n   */\n  constructor () {\n    this.count = 1\n    this.children = { }\n  }\n\n  /**\n   * Add a key for a color, this key is a simplification to find neighboring colors.\n   * Neighboring colors has same key.\n   * \n   * @param {Number} key  Simplication of color\n   */\n  addGroup (key) {\n    if (this.children[key]) {\n      this.children[key].count++\n    } else {\n      this.children[key] = new ColorGroup()\n    }\n\n    return this.children[key]\n  }\n\n  /**\n   * Add color to the group.\n   * \n   * @param {Number} hex  Hexadecimal color from 0x000000 to 0xFFFFFF\n   * @param {Number} red  Integer red chanel from 0 to 255\n   * @param {Number} green  Integer green chanel from 0 to 255\n   * @param {Number} blue  Integer blue chanel from 0 to 255\n   */\n  addColor (hex, red, green, blue) {\n    if (this.children[hex]) {\n      this.children[hex].count++\n    } else {\n      this.children[hex] = new Color(red, green, blue, hex)\n    }\n\n    return this.children[hex]\n  }\n\n  /**\n   * Get list of groups of list of colors. \n   */\n  getList () {\n    return Object.keys(this.children)\n      .map((key) => this.children[key])\n  }\n\n  /**\n   * Max color weight between the children colors, depends of his saturation and his count.\n   * \n   * @param {Number} saturationImportance  Determine the weight of the saturation for the calcul (from 0 to 1)\n   * @param {Number} count  Number of pixels in the image.\n   * @returns {Number}\n   */\n  getMaxWeight (saturationImportance, count) {\n    if (this.maxWeight === undefined) {\n      const list = this.getList()\n        .map((child) => (child.isColor ? child.getWeight(saturationImportance, count) : child.getMaxWeight(saturationImportance, count)))\n\n      list.sort((a, b) => b - a)\n      this.maxWeight = list[0] || 0\n    }\n\n    return this.maxWeight\n  }\n\n  /**\n   * Color with the the max weight between the children colors, depends of his saturation and his count.\n   * \n   * @param {Number} saturationImportance  Determine the weight of the saturation for the calcul (from 0 to 1)\n   * @param {Number} count  Number of pixels in the image.\n   * @returns {Color}\n   */\n  getMaxWeightColor (saturationImportance, count) {\n    const list = this.getList()\n    list.sort((a, b) => {\n      if (a.isColor) {\n        return b.getWeight(saturationImportance, count) - a.getWeight(saturationImportance, count)\n      }\n      return b.getMaxWeight(saturationImportance, count) - a.getMaxWeight(saturationImportance, count)\n    })\n\n    return list[0].isColor ? list[0] : list[0].getMaxWeightColor(saturationImportance, count)\n  }\n\n  /**\n   * Max count of colors for a group of colors.\n   * \n   * @returns {Number}\n   */\n  getMaxCountColor () {\n    const list = this.getList()\n    list.sort((a, b) => {\n      if (a.isColor) {\n        return b.count - a.count\n      }\n      return b.getMaxCountColor() - a.getMaxCountColor()\n    })\n\n    return list[0].isColor ? list[0] : list[0].getMaxCountColor()\n  }\n\n  /**\n   * List of colors sorted by importance (neighboring hare calculated by distance and removed).\n   * Importance is calculated with the saturation and count of neighboring colors.\n   * \n   * @param {Number} distance  Minimum distance between colors (from 0 to 1)\n   * @param {Number} saturationImportance  Determine the weight of the saturation for the calcul (from 0 to 1)\n   * @param {Number} count  Total pixels of image\n   * @returns {Array<Color>}\n   */\n  getColors (distance, saturationImportance, count) {\n    const list = this.getList()\n      .map((child) => {\n        const { count } = child\n        const color = child.getMaxCountColor()\n        color.count = count\n        return color\n      })\n\n    list.sort((a, b) => b.getWeight(saturationImportance, count) - a.getWeight(saturationImportance, count))\n\n    const newList = []\n    list.forEach((color) => {\n      const near = newList.find((col) => col.distance(color) < distance)\n      if (!near) {\n        newList.push(color)\n      } else {\n        near.count += color.count\n      }\n    })\n\n    return newList\n  }\n}\n","import ColorsGroup from './ColorsGroup'\n\n/**\n * Process to extract main colors from list of colors. \n * \n * @module ColorsExtractor\n * @memberof module:core\n */\n\n/**\n * Test if value is an integer.\n * \n * @param {String} label \n * @param {Number} val \n * @param {Number} min \n * @param {Number} max \n */\nconst testUint = (label, val, min = 0, max = Number.MAX_SAFE_INTEGER) => {\n  if (!Number.isInteger(val) || val < min || val > max) {\n    throw new Error(`${label} is invalid`)\n  }\n\n  return parseInt(val)\n}\n\n/**\n * Test if value is a number.\n * \n * @param {String} label \n * @param {Number} val \n * @param {Number} min \n * @param {Number} max \n */\nconst testNumber = (label, val, min = 0, max = Number.MAX_VALUE) => {\n  if (Number(val) !== val || val < min || val > max) {\n    throw new Error(`${label} is invalid`)\n  }\n\n  return Number(val)\n}\n\n/**\n * Test if value is a function.\n * \n * @param {String} label \n * @param {Function} val \n */\nconst testFunction = (label, val) => {\n  if (!val || {}.toString.call(val) !== '[object Function]') {\n    throw new Error(`${label} is invalid`)\n  }\n\n  return val\n}\n\n/**\n * @class\n * @classdesc Process to extract neighboring colors.\n */\nexport default class ColorsExtractor {\n\n  /**\n   * @param {Object=} options  Optional data\n   * @param {String=} options.pixels  Total pixel number of the resized picture for calculation\n   * @param {String=} options.distance  From 0 to 1 is the color distance to not have near colors (1 distance is between white and black)\n   * @param {String=} options.saturationImportance  Power of the saturation weight during the process (0 is not used, 1 is only saturation and not area size)\n   * @param {String=} options.splitPower  Approximation power in the first color splitting during process (from 2 to 16)\n   * @param {String=} options.colorValidator  Callback with test to enable only some colors\n   */\n  constructor ({\n    pixels = ColorsExtractor.pixelsDefault,\n    distance = ColorsExtractor.distanceDefault,\n    saturationImportance = ColorsExtractor.saturationImportanceDefault,\n    splitPower = ColorsExtractor.splitPowerDefault,\n    colorValidator = ColorsExtractor.colorValidatorDefault\n  } = {}) {\n    this.pixels = testUint('pixels', pixels, 1)\n    this.splitPower = testNumber('splitPower', splitPower, 2, 16)\n    this.distance = testNumber('distance', distance, 0, 1)\n    this.saturationImportance = testNumber('saturationImportance', saturationImportance, 0, 1)\n    this.colorValidator = testFunction('colorValidator', colorValidator)\n  }\n\n  /**\n   * Run extract process and get list of colors.\n   * \n   * @param {Array<Number>} data  List of colors with an array of flat colors by chanels with 0 to 255 per chanel (red, green, blue, alpha)\n   * @returns {Array<Color>}\n   */\n  process (data) {\n    const rootGroup = new ColorsGroup()\n    const acc = this.splitPower\n\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i] // 0 -> 255\n      const g = data[i + 1]\n      const b = data[i + 2]\n      const a = data[i + 3]\n\n      if (this.colorValidator(r, g, b, a)) {\n        const real = r << 16 | g << 8 | b\n        const medium = (r >> 4 & 0xF) << 2 | (g >> 4 & 0xF) << 1 | (b >> 4 & 0xF)\n        const small = Math.round(r * (acc - 1) / 255) * (acc * acc) + Math.round(g * (acc - 1) / 255) * acc + Math.round(b * (acc - 1) / 255)\n\n        const smallGroup = rootGroup.addGroup(small)\n        const mediumGroup = smallGroup.addGroup(medium)\n        mediumGroup.addColor(real, r, g, b)\n      }\n    }\n\n    return rootGroup.getColors(this.distance, this.saturationImportance, this.pixels)\n  }\n\n  /**\n   * Extract colors from data.\n   * \n   * @param {Array<Number>} data  List of colors with an array of flat colors by chanels with 0 to 255 per chanel (red, green, blue, alpha)\n   * @returns {Array<Object>} { hex, red, green, blue, area, saturation }\n   */\n  extract (data) {\n    return this.process(data)\n      .map((color) => ({\n        hex: `#${'0'.repeat(6 - color.hex.toString(16).length)}${color.hex.toString(16)}`,\n        red: color.red,\n        green: color.green,\n        blue: color.blue,\n        area: color.count / this.pixels,\n        saturation: color.saturation / 0xFF\n      }))\n  }\n}\n\nColorsExtractor.pixelsDefault = 10000\nColorsExtractor.distanceDefault = 0.2\nColorsExtractor.saturationImportanceDefault = 0.2\nColorsExtractor.splitPowerDefault = 10\nColorsExtractor.colorValidatorDefault = (red, green, blue, alpha = 255) => alpha > 250\n","import ColorsExtractor from './color/ColorsExtractor'\n\n/**\n * Browser exported functions.\n * \n * @example\n * import extractColors from 'extract-colors'\n * \n * const src = 'my-image.jpg'\n * \n * extractColors(src)\n *   .then(console.log)\n *   .catch(console.error)\n * \n * @module Browser\n * @memberof browser\n */\n\n/**\n * Extract ImageData from image.\n * Reduce image to a pixel count.\n * \n * @param {Image} image  Source image\n * @param {Number} pixels  Maximum number of pixels for process\n * @returns {ImageData}\n */\nconst getImageData = (image, pixels) => {\n  const currentPixels = image.width * image.height\n  const width = currentPixels < pixels ? image.width : Math.round(image.width * Math.sqrt(pixels / currentPixels))\n  const height = currentPixels < pixels ? image.height : Math.round(image.height * Math.sqrt(pixels / currentPixels))\n\n  const canvas = document.createElement('canvas')\n  canvas.width = width\n  canvas.height = height\n\n  const context = canvas.getContext('2d')\n  context.drawImage(image, 0, 0, image.width, image.height, 0, 0, width, height)\n\n  return context.getImageData(0, 0, width, height)\n}\n\n/**\n * Extract colors from an ImageData object.\n * \n * @param {ImageData} imageData  \n * @param {Object=} options  Optional data\n * @param {String=} options.pixels  Total pixel number of the resized picture for calculation\n * @param {String=} options.distance  From 0 to 1 is the color distance to not have near colors (1 distance is between white and black)\n * @param {String=} options.saturationImportance  Power of the saturation weight during the process (0 is not used, 1 is only saturation and not area size)\n * @param {String=} options.splitPower  Approximation power in the first color splitting during process (from 2 to 16)\n * @param {String=} options.colorValidator  Callback with test to enable only some colors\n * @returns {Array<Object>}\n */\nconst extractColorsFromImageData = (imageData, options) => {\n  const colorsExtractor = new ColorsExtractor(options)\n  return colorsExtractor.extract(imageData.data)\n}\n\n/**\n * Extract colors from an Image object.\n * \n * @param {Image} image  \n * @param {Object=} options  Optional data\n * @param {String=} options.pixels  Total pixel number of the resized picture for calculation\n * @param {String=} options.distance  From 0 to 1 is the color distance to not have near colors (1 distance is between white and black)\n * @param {String=} options.saturationImportance  Power of the saturation weight during the process (0 is not used, 1 is only saturation and not area size)\n * @param {String=} options.splitPower  Approximation power in the first color splitting during process (from 2 to 16)\n * @param {String=} options.colorValidator  Callback with test to enable only some colors\n * @returns {Array<Object>}\n */\nconst extractColorsFromImage = (image, options) => {\n  image.crossOrigin = (options && options.crossOrigin) || null\n  return new Promise((resolve) => {\n    const extract = (image, options) => {\n      const colorsExtractor = new ColorsExtractor(options)\n      const imageData = getImageData(image, colorsExtractor.pixels)\n      resolve(colorsExtractor.extract(imageData.data))\n    }\n\n    if (image.complete) {\n      extract(image, options)\n    } else {\n      const imageLoaded = () => {\n        image.removeEventListener('load', imageLoaded)\n        extract(image, options)\n      }\n      image.addEventListener('load', imageLoaded)\n    }\n  })\n}\n\n/**\n * Extract colors from a path.\n * The image will be downloaded.\n * \n * @param {String} src \n * @param {Object=} options  Optional data\n * @param {String=} options.pixels  Total pixel number of the resized picture for calculation\n * @param {String=} options.distance  From 0 to 1 is the color distance to not have near colors (1 distance is between white and black)\n * @param {String=} options.saturationImportance  Power of the saturation weight during the process (0 is not used, 1 is only saturation and not area size)\n * @param {String=} options.splitPower  Approximation power in the first color splitting during process (from 2 to 16)\n * @param {String=} options.colorValidator  Callback with test to enable only some colors\n * @returns {Array<Object>}\n */\nconst extractColorsFromSrc = (src, options) => {\n  const image = new Image()\n  image.src = src\n  return extractColorsFromImage(image, options)\n}\n\n/**\n * Extract colors from a picture.\n * \n * @param {String|Image|ImageData} picture  Src, Image or ImageData\n * @param {Object=} options  Optional data\n * @param {String=} options.pixels  Total pixel number of the resized picture for calculation\n * @param {String=} options.distance  From 0 to 1 is the color distance to not have near colors (1 distance is between white and black)\n * @param {String=} options.saturationImportance  Power of the saturation weight during the process (0 is not used, 1 is only saturation and not area size)\n * @param {String=} options.splitPower  Approximation power in the first color splitting during process (from 2 to 16)\n * @param {String=} options.colorValidator  Callback with test to enable only some colors\n * @returns {Array<Object>}\n */\nconst extractColors = (picture, options) => {\n\n  if (picture instanceof ImageData) {\n    return new Promise((resolve) => {\n      resolve(extractColorsFromImageData(picture, options))\n    })\n  }\n\n  if (picture instanceof Image) {\n    return extractColorsFromImage(picture, options)\n  }\n\n  return extractColorsFromSrc(picture, options)\n}\n\nexport {\n  extractColorsFromImageData,\n  extractColorsFromImage,\n  extractColorsFromSrc\n}\n\nexport default extractColors\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","import extractColors from '../../src/extractColorsBrowser'\n\nlet realState = 0\nlet imgs = []\n\nconst options = {\n  pixels: 10000,\n  distance: 0.2,\n  saturationImportance: 0.2,\n  splitPower: 10,\n  uploadFile () {\n    imgs = []\n    const input = document.getElementById('inputFile')\n    input.onchange = function ({ target }) {\n      [...target.files].forEach(file => {\n        imgs.push(URL.createObjectURL(file))\n      })\n      process()\n    }\n    input.click()\n  },\n  randomFile () {\n    imgs = []\n    randomImgs()\n    process()\n  }\n}\n\n// Add image + colors in DOM\nconst resetDisplay = () => {\n  const list = document.body.querySelector('.list')\n  list.innerHTML = ''\n\n  imgs.forEach(src => {\n    const div = document.createElement('div')\n    div.classList.add('block')\n\n    // display image\n    const image = new Image()\n    image.crossOrigin = 'anonymous'\n    image.src = src\n    image.height = 200\n    image.style.width = 'auto'\n    div.appendChild(image)\n\n    const canvas = document.createElement('canvas')\n    canvas.width = 20\n    canvas.height = image.height\n    div.appendChild(canvas)\n\n    list.appendChild(div)\n  })\n}\n\nconst displayLog = (index, ...logs) => {\n  const pre = document.createElement('pre')\n  pre.classList.add('log', 'hljs')\n\n  logs.forEach(log => {\n    const div = document.createElement('div')\n    div.innerHTML = log\n    pre.append(div)\n  })\n\n  const block = document.body.querySelectorAll('.list .block')[index]\n  block.append(pre)\n}\n\nconst displayImg = ({ colors, index, state, initTime, pixels }) => {\n  if (state !== realState) {\n    return false\n  }\n\n  const div = document.body.querySelectorAll('.list .block')[index]\n  const canvas = div.querySelector('canvas')\n  const img = div.querySelector('img')\n\n  displayLog(\n    index,\n    `${colors.length} colors: ` + colors.map(color => `<span class=\"square\" style=\"color:${color.hex}\">▮</span>`).join(' '),\n    'pixels: ' + Math.min(pixels, img.naturalWidth * img.naturalHeight),\n    'time: ' + (Date.now() - initTime) + 'ms'\n  )\n\n  // display colors\n  {\n    const context = canvas.getContext('2d')\n\n    const imageData = context.createImageData(canvas.width, canvas.height)\n    const pixels = imageData.data\n\n    /* eslint no-labels: \"off\" */\n    loop: for (let r = 0; r < imageData.height; r++) {\n      for (let c = 0; c < imageData.width; c++) {\n        const i = Math.floor(r / canvas.width)\n        const color = colors[i]\n\n        if (!color) { break loop }\n\n        const pos = (r * (imageData.width * 4)) + (c * 4)\n        pixels[pos + 0] = color.red\n        pixels[pos + 1] = color.green\n        pixels[pos + 2] = color.blue\n        pixels[pos + 3] = 255\n      }\n    }\n\n    context.putImageData(imageData, 0, 0)\n  }\n\n  return true\n}\n\nconst update = (data) => {\n  console.log(data, options)\n  process()\n}\n\nconst randomImgs = ({ random = true, directory = false } = {}) => {\n  if (random) {\n    // Some random tests\n    ['moon', 'water', 'sea', 'colors', 'sky'].forEach(seed => {\n      const index = Math.round(Math.random() * 20) + 5\n      imgs.push(`https://loremflickr.com/320/240/${seed}/?lock=${index}`)\n    })\n  } else if (directory) {\n    // Your tests in the img directory\n    Object.values(require('./img/*.jpg')).forEach(imgSrc => {\n      imgs.push(imgSrc)\n    })\n  }\n}\n\nconst process = () => {\n  realState++\n  const state = realState\n\n  resetDisplay()\n\n  let promise\n  imgs.forEach((src, index) => {\n    if (!promise) {\n      const initTime = Date.now()\n      promise = extractColors(src, { ...options, crossOrigin: 'anonymous' })\n        .then(colors => displayImg({ colors, src, index, state, initTime, ...options }))\n    } else {\n      promise\n        .then(() => {\n          const initTime = Date.now()\n          return extractColors(src, { ...options, crossOrigin: 'anonymous' })\n            .then(colors => displayImg({ colors, src, index, state, initTime, ...options }))\n        })\n    }\n  })\n\n  if (promise) {\n    promise.catch(console.log)\n  }\n}\n\nconst gui = new dat.GUI()\ngui.add(options, 'pixels', 1).step(1).name('pixels').onFinishChange(update)\ngui.add(options, 'distance', 0, 1).name('distance').onFinishChange(update)\ngui.add(options, 'saturationImportance', 0, 1).name('saturationImportance').onFinishChange(update)\ngui.add(options, 'splitPower', 2, 16).name('splitPower').onFinishChange(update)\n\ngui.add(options, 'uploadFile').name('Upload images')\ngui.add(options, 'randomFile').name('5 random images')\n\noptions.randomFile()\n"]}